.. _for_the_programmer_Adding_modules:

====================================================
For the programmer - Adding modules
====================================================

.. toctree::
   :maxdepth: 2

Preparing the file that will hold the step code
-------------------------------------------------

1. Choose a name for the module. e.g. ``bowtie2_mapper``
2. Decide which level the module will work on: single files, samples or project-wide?
    - If it works on single files, you can take ``merge.py`` as a template.
    - If it works on the sample level, take ``trimmo.py`` as a template.
    - If it works on the project level, take ``blast.py`` as a template.
3. Create a file for the module code in directory ``step_classes``. The file should be named ``<module_name>.py``. 

    .. note:: You can create the step in a new folder within ``step_classes``, but then you must create an empty ``__init__.py`` file inside the directory you created. 
    
    Alternatively, you can place the new directory anywhere, create an empty ``__init__.py`` file inside the directory, and pass the directory path with the ``module_path`` parameter.

4. Change the class name to ``Step_<module_name>`` in the line beginning with ``class Step_...``. Make sure ``<module_name>`` here is identical to the one you used to name the file in 3 above.


Things to modify in the actual code
-------------------------------------

1. In ``step_specific_init()``, set ``self.shell`` to `csh` or `bash`, depending on the shell language you want your scripts to be coded in.
2. In ``step_sample_initiation()`` method, you can do things on the ``sample_data`` structure before actual script preparing, such as assertion checking to make sure the data the step requires exists in the ``sample_data`` structure.
3. ``build_scripts()`` is the actual place to put the step script building code. See detailed instructions below.
4. ``make_sample_file_index()`` is a place to put code that produces an index file of the files produced by this step (BLAST uses this function, so you can check it out in ``blast.py``)
5. In ``create_spec_preliminary_script()`` you create the code for a script that will be run before all other step scripts are executed. If not defined or returns nothing, it will be ignored (i.e. you can set it to ``pass``). This is useful if you need to prepare a database, for example, before the other scripts use it.
6. In ``create_spec_wrapping_up_script()`` you create the code for a script that will be run after all other step scripts are executed. If not defined or returns nothing, it will be ignored (i.e. you can set it to "pass"). This is the place to call ``make_sample_file_index()`` to create an index of the files produced in this step; and to call a script that takes the index file and does some kind of data agglomeration.

Instructions for ``build_scripts()`` function
------------------------------------------------

- If sample-level scripts are required, the function should contain a loop::

        for sample in self.sample_data["samples"]:


- Set ``self.script`` to contain the command/s executed by the script (This will go inside the ``for`` loop for sample-level steps)

    1. Initialize it with ``self.script = ""``
    2. Calling ``self.script += self.get_script_const()`` will add the `env` parameter, if it exists; the `script_path` parameter and the redirected parameters. Then all that remains is to see to input and output parameters.
    3. The input parameter, typically ``-i``, is usually based on the sample data structure, _e.g._::
    
        self.script += "-i %s \\\n\t" % self.sample_data[sample]["fasta.nucl"]
 
    .. note:: The ``"\\\n\t"`` at the end of the string makes the final script more readable.
  
    4. The output parameter (typicall ``-o``) should be set to a filename within ``self.base_dir``. If the step is sample-level step, get a directory for the output files by calling::
    
        sample_dir = self.make_folder_for_sample(sample)

- Place the output file somewhere in the ``sample_data`` structure. _e.g._::

        self.sample_data[sample]["bam"] = (sample_dir + os.path.basename(output_filename))
    
- If the output is a standard file, *e.g.* BAM or fastq files, put them in the respective places in ``sample_data``. See documentation for simira modules to find out the naming scheme. Otherwise, use a concise file-type descriptor for the file and specify the location you decided on in the module documentation.
 
* The function should end with the following line (within the sample-loop, if one exists)::

        self.create_low_level_script()

* That, and a little bit of debugging, usually, is all it requires to add a module to the pipeline. 


Exceptions and Warnings
------------------------

When programming a module, the programmer usually has certain requirements from the user, for instance parameters that are required to be set in the parameter file or sets of parameters which the user has to choose between them.

This kind of condition is typically programmed in python using assertions.

In NeatSeq-Flow, assertions are managed with the ``AssertionExcept`` exception class. For testing the parameters, create an ``if`` condition which raises an ``AssertionExcept``. The arguments to ``AssertionExcept`` are as follows:

1. An error message to be displayed. ``AssertionExcept`` will automatically add the step name to the message.
2. Optional: The sample name, in case the condition failed for a particular sample (e.g. a particular sample does not have a BAM file defined.)

A typical condition testing code snippet::

    for sample in self.sample_data["samples"]:      
        if not CONDITION:
            raise AssertionExcept("INFORMATIVE error message\n", sample)

.. note:: The reason for using ``if not CONDITION`` rather than ``if CONDITION`` is that the condition is a condition for success rather than for failure, which is more intuitive (for me at least)

If you only want to warn the user about a certain issue, rather than failing, you can induce NeatSeq-Flow to produce a warning message with the same format as an ``AssertionExcept`` message, as follows::

    for sample in self.sample_data["samples"]:
        if CONDITION:
            self.write_warning("Warning message.\n", sample)

.. note:: As for ``AssertionExcept``, the ``sample`` argument is optional.


Additional comments
-------------------------

1. You can add more than one command in the ``self.script`` vartiable if the two commands are typically executed together. See ``class Step_samtools`` for an example.

2. A step can operate on the sample or project level. For example, BLAST can run on sample fasta files or on a project-wide assembly. See how we did this in our definition of BLAST. An alternative is to add an ``if..else`` in the ``build_scripts()`` function. If this is your case, you should require a ``scope`` parameter which can be set to ``sample`` or to ``project``.
